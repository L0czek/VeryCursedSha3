#include <gtest/gtest.h>

#include "../src/sha3.hpp"

TEST(SHA3Test, StepByStepTest) {
	// https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/SHA3-512_Msg0.pdf
	std::array<unsigned long, 25> init_state = {
		0x0000000000000006,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
		0x0000000000000000,
	};
	std::array<unsigned long, 25> after_theta_round0 = {
		0x0000000000000006,
		0x0000000000000006,
		0x0000000000000001,
		0x0000000000000000,
		0x800000000000000c,
		0x0000000000000000,
		0x0000000000000006,
		0x0000000000000001,
		0x8000000000000000,
		0x800000000000000c,
		0x0000000000000000,
		0x0000000000000006,
		0x0000000000000001,
		0x0000000000000000,
		0x800000000000000c,
		0x0000000000000000,
		0x0000000000000006,
		0x0000000000000001,
		0x0000000000000000,
		0x800000000000000c,
		0x0000000000000000,
		0x0000000000000006,
		0x0000000000000001,
		0x0000000000000000,
		0x800000000000000c,
	};
	std::array<unsigned long, 25> after_rho_round0 = {
		0x0000000000000006,
		0x000000000000000c,
		0x4000000000000000,
		0x0000000000000000,
		0x0000000064000000,
		0x0000000000000000,
		0x0000600000000000,
		0x0000000000000040,
		0x0040000000000000,
		0x0000000000c80000,
		0x0000000000000000,
		0x0000000000001800,
		0x0000080000000000,
		0x0000000000000000,
		0x0000064000000000,
		0x0000000000000000,
		0x0000c00000000000,
		0x0000000000008000,
		0x0000000000000000,
		0x0000000000000c80,
		0x0000000000000000,
		0x0000000000000018,
		0x2000000000000000,
		0x0000000000000000,
		0x0000000000032000,
	};
	std::array<unsigned long, 25> after_pi_round0 = {
		0x0000000000000006,
		0x0000600000000000,
		0x0000080000000000,
		0x0000000000000000,
		0x0000000000032000,
		0x0000000000000000,
		0x0000000000c80000,
		0x0000000000000000,
		0x0000c00000000000,
		0x2000000000000000,
		0x000000000000000c,
		0x0000000000000040,
		0x0000000000000000,
		0x0000000000000c80,
		0x0000000000000000,
		0x0000000064000000,
		0x0000000000000000,
		0x0000000000001800,
		0x0000000000008000,
		0x0000000000000000,
		0x4000000000000000,
		0x0040000000000000,
		0x0000064000000000,
		0x0000000000000000,
		0x0000000000000018,
	};
	std::array<unsigned long, 25> after_chi_round0 = {
		0x0000080000000006,
		0x0000600000000000,
		0x0000080000032000,
		0x0000000000000006,
		0x0000600000032000,
		0x0000000000000000,
		0x0000c00000c80000,
		0x2000000000000000,
		0x0000c00000000000,
		0x2000000000c80000,
		0x000000000000000c,
		0x0000000000000cc0,
		0x0000000000000000,
		0x0000000000000c8c,
		0x0000000000000040,
		0x0000000064001800,
		0x0000000000008000,
		0x0000000000001800,
		0x0000000064008000,
		0x0000000000000000,
		0x4000064000000000,
		0x0040000000000000,
		0x0000064000000018,
		0x4000000000000000,
		0x0040000000000018,
	};
	std::array<unsigned long, 25> after_iota_round0 = {
		0x0000080000000007,
		0x0000600000000000,
		0x0000080000032000,
		0x0000000000000006,
		0x0000600000032000,
		0x0000000000000000,
		0x0000c00000c80000,
		0x2000000000000000,
		0x0000c00000000000,
		0x2000000000c80000,
		0x000000000000000c,
		0x0000000000000cc0,
		0x0000000000000000,
		0x0000000000000c8c,
		0x0000000000000040,
		0x0000000064001800,
		0x0000000000008000,
		0x0000000000001800,
		0x0000000064008000,
		0x0000000000000000,
		0x4000064000000000,
		0x0040000000000000,
		0x0000064000000018,
		0x4000000000000000,
		0x0040000000000018,
	};
	std::array<unsigned long, 25> after_theta_round1 = {
		0x20c12800015a39df,
		0x000072c06406683b,
		0x80412800c8cab5d4,
		0x6080ce40019578ae,
		0xc000bc80ac039c9c,
		0x20c12000015a39d8,
		0x0000d2c064ce683b,
		0xa0412000c8c995d4,
		0x60800e40019578a8,
		0xe000dc80acc8bc9c,
		0x20c12000015a39d4,
		0x000012c0640664fb,
		0x80412000c8c995d4,
		0x6080ce4001957424,
		0xc000dc80ac00bcdc,
		0x20c12000655a21d8,
		0x000012c06406e83b,
		0x80412000c8c98dd4,
		0x6080ce406595f8a8,
		0xc000dc80ac00bc9c,
		0x60c12640015a39d8,
		0x004012c06406683b,
		0x80412640c8c995cc,
		0x2080ce40019578a8,
		0xc040dc80ac00bc84,
	};
	std::array<unsigned long, 25> after_rho_round1 = {
		0x20c12800015a39df,
		0x0000e580c80cd076,
		0x20104a003232ad75,
		0x0019578ae6080ce4,
		0x05601ce4e60005e4,
		0x15a39d820c120000,
		0xe683b0000d2c064c,
		0x1048003232657528,
		0x543040072000cabc,
		0xc80acc8bc9ce000d,
		0x060900000ad1cea1,
		0x004b01901993ec00,
		0x4caea40209000646,
		0x80032ae848c1019c,
		0x005e6e60006e4056,
		0xb443b041824000ca,
		0xdd07600002580c80,
		0x90006464c6ea4020,
		0xc80cb2bf150c1019,
		0x00dc80ac00bc9cc0,
		0x99000568e7618304,
		0x01004b019019a0ec,
		0x900824c8191932b9,
		0xa82080ce40019578,
		0x37202b002f213010,
	};
	std::array<unsigned long, 25> after_pi_round1 = {
		0x20c12800015a39df,
		0xe683b0000d2c064c,
		0x4caea40209000646,
		0xc80cb2bf150c1019,
		0x37202b002f213010,
		0x0019578ae6080ce4,
		0xc80acc8bc9ce000d,
		0x060900000ad1cea1,
		0xdd07600002580c80,
		0x900824c8191932b9,
		0x0000e580c80cd076,
		0x1048003232657528,
		0x80032ae848c1019c,
		0x00dc80ac00bc9cc0,
		0x99000568e7618304,
		0x05601ce4e60005e4,
		0x15a39d820c120000,
		0x004b01901993ec00,
		0x90006464c6ea4020,
		0xa82080ce40019578,
		0x20104a003232ad75,
		0x543040072000cabc,
		0x005e6e60006e4056,
		0xb443b041824000ca,
		0x01004b019019a0ec,
	};
	std::array<unsigned long, 25> after_chi_round1 = {
		0x28ed2c02015a39dd,
		0x6683a2bd19201655,
		0x7b8ead0223212646,
		0xc8cdb2bf155619d6,
		0xf122bb0023053610,
		0x0618578ae419c244,
		0x110cac8bc9c6000d,
		0x060104c813d0fc98,
		0xdd163302e45800c4,
		0x580aacc910df32b0,
		0x8003cf48808cd0e2,
		0x109480363259e968,
		0x19032fa8af800298,
		0x00dc602c08b0ccb2,
		0x8948055ad500a60c,
		0x05281cf4f781e9e4,
		0x85a3f9e6ca7a0020,
		0x286b811a19927958,
		0x9540784460ea40a4,
		0xb8a301cc48139578,
		0x205e6460325cad37,
		0xe031d006a200ca34,
		0x015e25601077e072,
		0x9453b041a0620ddb,
		0x55204b069019e264,
	};
	std::array<unsigned long, 25> after_iota_round1 = {
		0x28ed2c02015ab95f,
		0x6683a2bd19201655,
		0x7b8ead0223212646,
		0xc8cdb2bf155619d6,
		0xf122bb0023053610,
		0x0618578ae419c244,
		0x110cac8bc9c6000d,
		0x060104c813d0fc98,
		0xdd163302e45800c4,
		0x580aacc910df32b0,
		0x8003cf48808cd0e2,
		0x109480363259e968,
		0x19032fa8af800298,
		0x00dc602c08b0ccb2,
		0x8948055ad500a60c,
		0x05281cf4f781e9e4,
		0x85a3f9e6ca7a0020,
		0x286b811a19927958,
		0x9540784460ea40a4,
		0xb8a301cc48139578,
		0x205e6460325cad37,
		0xe031d006a200ca34,
		0x015e25601077e072,
		0x9453b041a0620ddb,
		0x55204b069019e264,
	};

	SHA3_512 sha3;
	sha3.load_state(init_state);
	EXPECT_EQ(sha3.dump_state(), init_state);

	sha3.theta();
	EXPECT_EQ(sha3.dump_state(), after_theta_round0);
	const auto b = sha3.rho_pi();
	EXPECT_EQ(sha3.dump_state(), after_pi_round0);
	sha3.chi(b);
	EXPECT_EQ(sha3.dump_state(), after_chi_round0);
	sha3.iota(0);
	EXPECT_EQ(sha3.dump_state(), after_iota_round0);

	sha3.theta();
	EXPECT_EQ(sha3.dump_state(), after_theta_round1);
	const auto b_round1 = sha3.rho_pi();
	EXPECT_EQ(sha3.dump_state(), after_pi_round1);
	sha3.chi(b_round1);
	EXPECT_EQ(sha3.dump_state(), after_chi_round1);
	sha3.iota(1);
	EXPECT_EQ(sha3.dump_state(), after_iota_round1);
}